cd sites/admin && npm start
npx create-react-app projectname
rfc  rcc 创建文件结构 快捷方式
重新学习 react 查漏补缺
jsx中：
class -> className
for -> htmlFor   <label htmlFor='usename'>用户名</lable> <input id='usename'/>
for 属性规定 label 与哪个表单元素绑定。
React推荐行内样式
注释{/* */}
React btn中的点击事件this.handleClick不要加 (),和vue不同

call apply 改变this指向 并且自动执行  bind改变this指向，但不执行

es7 class中的属性可以直接用a = (){} 这种方式定义，不用强制写在constructor中
class A{constructor(){} c=333}; (new A()).c ===333
React并不会真正绑定到每个具体的元素上采用的是事件代理 的方式
事件代理：https://www.bilibili.com/video/BV1dP4y1c7qd?p=12&spm_id_from=pageDriver
this.refs.mytext
a = [1,2,3] b= [...a] ||  b = a.slice() || b = a.concat(); //避免引用赋值

1.三目{this.state.lists.length === 0 ? <div>暂无待办事项</div>:null} 
2.{this.state.lists.length === 0 && <div>暂无待办事项</div>}
3.<div className={条件?'hidden':''}>暂无待办事项</div>

富文本创建的内容  https://www.bilibili.com/video/BV1dP4y1c7qd?p=20&spm_id_from=pageDriver
(<div  dangerouslySetInnerHTML={{__html: this.state.content}} /> )// 注意这里是两个下下划线 __html
---------------------------------------------------------------------------------
1. String Refs
<input ref="textInput" value='value' />
2. 回调 Refs 
ref 传入一个回调函数
该函数中接受 React 组件实例或 DOM 元素作为参数
我们通常会将其存储到具体的实例属性（this.textInput）
<input ref={(element) => {this.textInput = element;}} value='value' />
3. createRef
this.textInputRef = React.createRef();
<input ref={this.textInputRef} value='value' />
// createRef 简化后
export function createRef() {
  const refObject = {
    current: null,
  };
  return refObject;
}在渲染的过程中，refObject.current 会被赋予具体的值。
// forwardRef
export function forwardRef(render) {
  const elementType = {
    $$typeof: REACT_FORWARD_REF_TYPE,
    render,
  };

  return elementType;
}
但是要注意这里的 $$typeof，尽管这里是 REACT_FORWARD_REF_TYPE，但最终创建的 React 元素的 $$typeof 依然为 REACT_ELEMENT_TYPE。
// 最终返回的对象为：
const result = {
  $$typeof: REACT_ELEMENT_TYPE,
  type: {
    $$typeof: REACT_FORWARD_REF_TYPE,
    render,
  }
}
---------------------------------------------------------------------------------
// 错误代码
const [user,setUser] = useState({name:'lifa', age: 18})
const onClick = () => {
  // 在原来的引用地址上修改name属性，不会起作用
  user.name = 'jack'
  setUser(user)
}
多次对useState进行操作的话推荐使用函数
useState可以接受函数
const [state, setState] = useState(()=>{
  return initialState
})
const [n,setN] = useState(1)
const onClick = () => {
  setN(n+1)
  setN(n+1)
}
上面我们在点击事件里执行了两次修改n，每次让他加一，可实际上他只会变一次，因为n本身是不会变的，而是每次生成一个新的n，所以上面结果是2而不是3，如果想要它加2的话就要用函数
setN(i=>i+1)
setN(i=>i+1)

useReducer用来践行Flux/Redux的思想,总的来说useRducer是useState的复杂版
const [state, dispatch] = useReducer(reducer, intialState)
---------------------------------------------------------------------------------
setState同步和异步讲解
setState有第二个参数，它是一个回调函数 状态和DOM更新完成
setState在一个同步的逻辑中 是个异步更新状态 更新真实DOM
setState在一个异步的逻辑中 是个同步更新状态 同步更新真实DOM(axios也是一个异步环境)
setTimeout(()=>{setState},0)
setState 会重新调用render;

betterScroll 
类 组件自带props属性； this.props
prop-types
属性验证 和类的静态属性一样 
Navbar.propTypes = { title : 验证是不是字符串的方法} // static propTypes = {}
Navbar.defaultProps = { title : 默认属性}
传多个属性参数 {...obj}
函数式组件，没有this  可以直接传形参 function(props){return } // 和类式组件的传参区别

父子通信

如果通过ref来访问表单 中 input，是非受控的，如果给这个表单中的input提供一个默认值 value='kerwin'，会发现这个非受控的，其它内容也输入不了了；
这种情况要把默认值的属性名改成 'defaultValue'

受控组件  input 中的vlaue = {this.state.username} react中onInput 和 onChange的行为是一样的 同效的
onChange = {(e)=>{this.setState({username:e.target.value})}}

过滤列表方案优化； 1.有一个备份数据源，占内存 2.利用受控组件来完成，不用备份数据
父子通信 父 传子 属性    ；  子传父 回调函数；

使用--save安装的打包都打进去，
使用--save-dev安装的不进行打包，故打包大小就有区别，根据自己的需要进行选择--save 还是--save-dev
只是在开发过程中需要的工具或者文件我们 使用 --save-dev 即可


利用context来完成传值  
1.定义const GlobalContext = React.createContext();
2.App变成供应商 <GlobalContext.Provider value={object}>
3.子组件成消费者 <GlobalContext.Consumer>   里面是一个回调函数，同时把值传进来 (value)=>{}
老的生命周期
(1) componentWillMount ,在ssr中 这个方法将会被多次调用， 所以会重复触发多遍，同时在这里如果绑定事件，
将无法解绑，导致内存泄漏 ， 变得不够安全高效逐步废弃。
(2) componentWillReceiveProps 外部组件多次频繁更新传入多次不同的 props，会导致不必要的异步请求
(3) componetWillupdate, 更新前记录 DOM 状态, 可能会做一些处理，与componentDidUpdate相隔时间如果过
长， 会导致 状态不太信
新的生命周期
（1）getDerivedStateFromProps 第一次的初始化组件以及后续的更新过程中(包括自身状态更新以及父传子) ，
返回一个对象作为新的state，返回null则说明不需要在这里更新state
 (2) getSnapshotBeforeUpdate 取代了 componetWillUpdate ,触发时间为update发生的时候，在render之后
dom渲染之前返回一个值，作为componentDidUpdate的第三个参数。

// https://www.swiper.com.cn/ swiper官网


Immutable.js 的几种数据类型
List: 有序索引集，类似JavaScript中的Array。
Map: 无序索引集，类似JavaScript中的Object。
将一个js数据转换为Immutable类型的数据
用法：fromJS(value, converter)
const obj = Immutable.fromJS({a:'123',b:'234'},function (key, value, path) {
        console.log(key, value, path)
        return isIndexed(value) ? value.toList() : value.toOrderedMap())
    })
将一个Immutable数据转换为JS类型的数据
用法：value.toJS()
-----------------------
immer.js
比起Facebook亲自打造的immutable.js，immer.js比immutable.js体积更小，不需要去记immutable.js里像Collection、List、Map、Set、Record这样的数据结构，使用的时候还需要toJS()转换成数组和对象才能正常使用。
---------------------------------------------------------------------
 p151 课程补充  router v6    src-routerV6
 "react-router-dom": "^6.3.0",
 router v5  v6 区别
1.文件大小更精简
2.<Route>  path与当前页面的URL匹配； 新增 element，用于决定路由匹配时渲染哪个组件 代替v5的component和 render
3.<Routes>代替了<Switch>
4.<Outlet></Outlet>让嵌套路由更简单，类似vue中的<router-view></router-view>
5.useNavigate代替了useHistory
6.移除了<NavLink/>中的activeClassName和activeStyle
7.钩子useRoutes代替react-router-config


声明式  <a href=''>
编程式  location.href = ''

activeClassname  取消

<outlet>来加载子路由

useNavigate来自定义 Redirect
 1. Navigate重定向
 2.自定义 Redirect  重定向

路由模式： BrowserRouter  HashRouter
BrowserRouter 会向后端发请求

try_files $uri $uri/ /index.html;
try_files -尝试访问对应的资源，在第一个资源访问不到时，访问第二个资源，以次向后
$uri Nginx地址变量，即为访问的地址若访问url为 http://www.xxx.com/index.html 则 $uri 为 /index.html
$uri/ 表示一个目录，请求访问的目录，Nginx try_files可自行判断访问目的的类型 是为文件还是目录
若访问url为 http://www.xxx.com/user/class/ 则 $uri/ 为 /user/class/
所以以上配置的规则为 当 $uri 和 $uri/ 均不是对应资源时 则返回 /index.html 页面

react 18  封装WithRouter报错
--------------------------------------------------------------------------------------------
React.useEffect模拟生命周期
模拟componentDidMount: 第二个参数为空数组，可以模拟compomentDidMount:useEffect(()=>{console.log('第一次渲染时调用')},[])
模拟componentDidUpdate: 没有第二个参数代表监听所有属性的更新useEffect(()=>{console.log('任意属性该改变')}) 
:监听多个属性的变化需要将属性作为数组传入第二个参数。useEffect(()=>{console.log('n变了')},[n,m]) 
模拟componentWillUnmount: 通常，组件卸载时需要清除 effect 创建的诸如订阅或计时器 ID 等资源
JS中的有序Map与无序Object
在JS中使用Map来存储数据如果不涉及枚举或者没有顺序要求使用Object进行实现，如果存在顺序要求使用有序Map进行实现。
--------------------------------------------------------------------------------------------
TypeError: this.getOptions is not a function
问题的分析：这个实际上就是 less-loader 的版本过高，不兼容 getOptions 函数方法，所以需要对 less-loader 进行降级处理
问题的解决：通过 npm uninstall less-loader 命令卸载原版本的 less-loader，然后 通过 npm install less-loader@5.0.0 命令下载降级版本的 less-loader，这个问题就可以解决了
--------------------------------------------------------------------------------------------
Node Sass version 7.0.3 is incompatible with ^4.0.0 || ^5.0.0 || ^6.0.0.
1.问题原因，安装了node-sass 版本过高；
2.问题解决:1.npm uninstall node-sass 2.npm install sass -D;
--------------------------------------------------------------------------------------------

 
